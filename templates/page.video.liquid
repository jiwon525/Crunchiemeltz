{% comment %} <div class="video-page-container">
  <div id="video-wrapper">
    <p>Loading video...</p>
  </div>
</div>

<style>
.video-page-container {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  padding: 50px 20px;
}
#video-wrapper video {
  max-width: 100%;
  height: auto;
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0,0,0,0.2);
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const params = new URLSearchParams(window.location.search);
  const videoUrl = params.get("url");

  const wrapper = document.getElementById("video-wrapper");
  if (videoUrl) {
    wrapper.innerHTML = `
      <video width="800" height="450" controls autoplay controlsList="nodownload">
        <source src="${decodeURIComponent(videoUrl)}" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    `;
  } else {
    wrapper.innerHTML = `
      <p class="no-video">No video selected. Please go back to the 
        <a href="{{ routes.root_url }}">homepage</a>.
      </p>
    `;
  }
});
</script> {% endcomment %}

{% comment %} <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Video Page</title>

  {% assign video_url = request.params.url | url_decode %}
  {% assign thumbnail_url = request.params.thumb | url_decode %}
  {% assign full_page_url = shop.url | append: request.path | append: "?" | append: request.query_string %}

  {% if video_url != blank %}
    <!-- ✅ Open Graph tags for social previews -->
    <meta property="og:title" content="Watch this video" />
    <meta property="og:type" content="video.other" />
    <meta property="og:url" content="{{ full_page_url }}" />
    <meta property="og:description" content="Check out this video shared from our store!" />

    <!-- ✅ Thumbnail from each video block -->
    {% if thumbnail_url != blank %}
      <meta property="og:image" content="{{ thumbnail_url | replace: 'http:', 'https:' }}" />
      <meta property="og:image:secure_url" content="{{ thumbnail_url | replace: 'http:', 'https:' }}" />
      <meta property="og:image:width" content="1200" />
      <meta property="og:image:height" content="630" />
      <meta name="twitter:image" content="{{ thumbnail_url }}" />
    {% else %}
      <!-- fallback image if no thumbnail -->
      <meta property="og:image" content="{{ 'video-thumbnail.jpg' | asset_url | prepend: shop.url }}" />
      <meta name="twitter:image" content="{{ 'video-thumbnail.jpg' | asset_url | prepend: shop.url }}" />
    {% endif %}

    <!-- ✅ Video metadata -->
    <meta property="og:video" content="{{ video_url }}" />
    <meta property="og:video:type" content="video/mp4" />
    <meta property="og:video:width" content="1280" />
    <meta property="og:video:height" content="720" />

    <!-- ✅ Twitter card metadata -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Watch this video" />
    <meta name="twitter:description" content="Check out this video shared from our store!" />
  {% endif %}
</head>

<body>
  <div class="video-page-container">
    <div id="video-wrapper">
      <p>Loading video...</p>
    </div>
  </div>

  <style>
    .video-page-container {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      padding: 50px 20px;
    }
    #video-wrapper video {
      max-width: 100%;
      height: auto;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const params = new URLSearchParams(window.location.search);
      const videoUrl = params.get("url");
      const wrapper = document.getElementById("video-wrapper");

      if (videoUrl) {
        wrapper.innerHTML = `
          <video width="800" height="450" controls autoplay muted playsinline controlsList="nodownload">
            <source src="${decodeURIComponent(videoUrl)}" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        `;
      } else {
        wrapper.innerHTML = `
          <p class="no-video">No video selected. Please go back to the 
            <a href="{{ routes.root_url }}">homepage</a>.
          </p>
        `;
      }
    });
  </script>
</body>
</html>`

``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````` {% endcomment %}
{% comment %} <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Video Page</title>

  <!-- ✅ Default Open Graph (fallbacks in case no JS) -->
  <meta property="og:title" content="Watch this video" />
  <meta property="og:type" content="video.other" />
  <meta property="og:url" content="{{ shop.url }}{{ request.path }}" />
  <meta property="og:description" content="Check out this video shared from our store!" />
  <meta property="og:image" content="{{ 'video-thumbnail.jpg' | asset_url | prepend: shop.url }}" />

  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="Watch this video" />
  <meta name="twitter:description" content="Check out this video shared from our store!" />
</head>

<body>
  <div class="video-page-container">
    <div id="video-wrapper">
      <p>Loading video...</p>
    </div>
  </div>

  <style>
    .video-page-container {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      padding: 50px 20px;
    }
    #video-wrapper video {
      max-width: 100%;
      height: auto;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const params = new URLSearchParams(window.location.search);
      const videoUrl = params.get("url");
      const thumbUrl = params.get("thumb");
      const wrapper = document.getElementById("video-wrapper");

      // ✅ Inject correct OG tags dynamically
      if (thumbUrl) {
        const metaTags = [
          { property: "og:image", content: decodeURIComponent(thumbUrl) },
          { property: "og:image:secure_url", content: decodeURIComponent(thumbUrl) },
          { name: "twitter:image", content: decodeURIComponent(thumbUrl) }
        ];

        metaTags.forEach(tag => {
          const meta = document.createElement("meta");
          if (tag.property) meta.setAttribute("property", tag.property);
          if (tag.name) meta.setAttribute("name", tag.name);
          meta.setAttribute("content", tag.content);
          document.head.appendChild(meta);
        });

        console.log("✅ Injected OG image:", decodeURIComponent(thumbUrl));
      } else {
        console.warn("⚠️ No thumbnail provided in URL.");
      }

      // ✅ Render video
      if (videoUrl) {
        wrapper.innerHTML = `
          <video width="800" height="450" controls autoplay muted playsinline controlsList="nodownload">
            <source src="${decodeURIComponent(videoUrl)}" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        `;
      } else {
        wrapper.innerHTML = `
          <p class="no-video">No video selected. Please go back to the 
            <a href="{{ routes.root_url }}">homepage</a>.
          </p>
        `;
      }
    });
  </script>
</body>
</html> {% endcomment %}

{% comment %} with the video and image together {% endcomment %}
{% comment %} <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{{ page_title | default: "Watch this video" }}</title>

  
  {% assign thumb_file = request.query.thumb | default: 'video-thumbnail.jpg' %}
  {% assign thumb_url = thumb_file | asset_url %}

  <!-- Open Graph / Facebook -->
  <meta property="og:image" content="{{ thumb_url }}" />
  <meta property="og:image:secure_url" content="{{ thumb_url | prepend: 'https:' }}" />

  <!-- Twitter -->
  <meta name="twitter:image" content="{{ thumb_url }}" />

</head>

<body>
  <div class="video-page-container">
    <div id="video-wrapper">
      <p>Loading video...</p>
    </div>
    {% comment %} <div id="thumbnail-wrapper" style="margin-top: 20px; text-align: center;">
      <!-- Thumbnail will appear here -->
    </div> {% endcomment %}
  </div>

  <div id="video-wrapper">
  {% comment %} <video width="800" height="450" controls autoplay muted playsinline>
    <source src="{{ request.query.url }}" type="video/mp4">
    Your browser does not support the video tag.
  </video>

  {% if request.query.thumb %}
    <img src="{{ request.query.thumb }}" alt="Video Thumbnail" width="800" height="450"style="margin-top: 20px; max-width: 800px; border-radius: 12px;">
  {% endif %} {% endcomment %}
</div>


  <style>
    .video-page-container {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 50px 20px;
    }

    #video-wrapper video {
      max-width: 100%;
      height: auto;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    }

    #thumbnail-wrapper img {
      max-width: 100%;
      height: auto;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const params = new URLSearchParams(window.location.search);
      const videoUrl = params.get("url");
      const thumbUrl = params.get("thumb");
      const wrapper = document.getElementById("video-wrapper");
      const thumbWrapper = document.getElementById("thumbnail-wrapper");

      // Render video
      if (videoUrl) {
        wrapper.innerHTML = `
          <video width="800" height="450" controls autoplay muted playsinline controlsList="nodownload">
            <source src="${decodeURIComponent(videoUrl)}" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        `;
      } else {
        wrapper.innerHTML = `
          <p class="no-video">No video selected. Please go back to the 
            <a href="{{ routes.root_url }}">homepage</a>.
          </p>
        `;
      }

      // Render thumbnail below the video
      if (thumbUrl) {
        thumbWrapper.innerHTML = `<img src="${decodeURIComponent(thumbUrl)}" alt="Video thumbnail">`;

        // Optional: dynamically inject OG tags for social sharing
        const metaTags = [
          { property: "og:image", content: decodeURIComponent(thumbUrl) },
          { property: "og:image:secure_url", content: decodeURIComponent(thumbUrl) },
          { name: "twitter:image", content: decodeURIComponent(thumbUrl) }
        ];

        metaTags.forEach(tag => {
          const meta = document.createElement("meta");
          if (tag.property) meta.setAttribute("property", tag.property);
          if (tag.name) meta.setAttribute("name", tag.name);
          meta.setAttribute("content", tag.content);
          document.head.appendChild(meta);
        });

        console.log("✅ Thumbnail rendered and OG tags injected:", decodeURIComponent(thumbUrl));
      } else {
        console.warn("⚠️ No thumbnail provided in URL.");
      }
    });
  </script>
</body>
</html> {% endcomment %}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Video Page</title>

  <!-- ✅ Hard-coded Open Graph tags (fallback for crawlers) -->
  <meta property="og:title" content="Watch this video" />
  <meta property="og:type" content="video.other" />
  <meta property="og:url" content="{{ shop.url }}{{ request.path }}" />
  <meta property="og:description" content="Check out this video shared from our store!" />

  {% comment %}
    Map videos to thumbnails (Liquid side)
  {% endcomment %}
  {% assign video_map = 
    {
      "https://cdn.shopify.com/videos/video1.mp4": "https://cdn.shopify.com/thumbnails/video1.jpg",
      "https://cdn.shopify.com/videos/video2.mp4": "https://cdn.shopify.com/thumbnails/video2.jpg"
    } 
  %}

  {% assign default_video_url = video_map | keys | first %}
  <meta property="og:image" content="{{ video_map[default_video_url] }}" />
  <meta property="og:image:secure_url" content="{{ video_map[default_video_url] }}" />
  <meta name="twitter:image" content="{{ video_map[default_video_url] }}" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="Watch this video" />
  <meta name="twitter:description" content="Check out this video shared from our store!" />

  <style>
    .video-page-container {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      padding: 50px 20px;
    }
    #video-wrapper video {
      max-width: 100%;
      height: auto;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    }
    #video-wrapper img {
      margin-top: 16px;
      max-width: 800px;
      border-radius: 8px;
      box-shadow: 0 2px 12px rgba(0,0,0,0.15);
    }
  </style>
</head>

<body>
  <div class="video-page-container">
    <div id="video-wrapper">
      <p>Loading video...</p>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const params = new URLSearchParams(window.location.search);
      const videoUrl = params.get("url"); // ?url=<video_url>
      const wrapper = document.getElementById("video-wrapper");

      // ✅ Video → thumbnail mapping (JS side)
      const videoMap = {
        "https://cdn.shopify.com/videos/c/o/v/b05443156c5e4b6cb84ce68e2ba375bc.mov": "https://cdn.shopify.com/s/files/1/0624/4938/5514/files/Slide1.jpg?v=1760125278",
        "https://cdn.shopify.com/videos/c/o/v/ac21774d6b964860b238cc7cc0809ef9.mov": "https://cdn.shopify.com/s/files/1/0624/4938/5514/files/Slide2_b7181901-69ad-4388-8215-d4a70b15af7f.jpg?v=1760125085"
        "https://cdn.shopify.com/videos/c/o/v/68fd8dc518434440a05095a8450f5817.mov": "https://cdn.shopify.com/s/files/1/0624/4938/5514/files/Slide3_4699ad95-e591-443c-8070-e9420fff0c0b.jpg?v=1760125239"
        "https://cdn.shopify.com/videos/c/o/v/a252542cefba454d9ccbda46beabb1eb.mov": "https://cdn.shopify.com/s/files/1/0624/4938/5514/files/Slide5_82c19c2b-50df-4969-b747-90ed898dc335.jpg?v=1760125328"
        "https://cdn.shopify.com/videos/c/o/v/cb8191ff965043968d402acabe8289ab.mov": "https://cdn.shopify.com/s/files/1/0624/4938/5514/files/Slide5_82c19c2b-50df-4969-b747-90ed898dc335.jpg?v=1760125328"
      };

      if (videoUrl && videoMap[videoUrl]) {
        const thumbUrl = videoMap[videoUrl];

        // Inject dynamic OG tags for in-page use
        const metaTags = [
          { property: "og:image", content: thumbUrl },
          { property: "og:image:secure_url", content: thumbUrl },
          { name: "twitter:image", content: thumbUrl }
        ];

        metaTags.forEach(tag => {
          const meta = document.createElement("meta");
          if (tag.property) meta.setAttribute("property", tag.property);
          if (tag.name) meta.setAttribute("name", tag.name);
          meta.setAttribute("content", tag.content);
          document.head.appendChild(meta);
        });

        // Render video + thumbnail
        wrapper.innerHTML = `
          <video width="800" height="450" controls autoplay muted playsinline controlsList="nodownload">
            <source src="${videoUrl}" type="video/mp4">
            Your browser does not support the video tag.
          </video>
          <img src="${thumbUrl}" alt="Video thumbnail" />
        `;
      } else {
        wrapper.innerHTML = `
          <p>No video selected. Please go back to the 
            <a href="{{ routes.root_url }}">homepage</a>.
          </p>
        `;
      }
    });
  </script>
</body>
</html>


{% comment %} 

with thumbnail appearing on top of the video
 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Watch Video | {{ shop.name }}</title>

  {% assign video_url = request.params.url | url_decode %}
  {% assign thumbnail_url = request.params.thumb | url_decode %}
  {% assign full_page_url = shop.url | append: request.path | append: "?" | append: request.query_string %}

  <!-- ✅ Open Graph Tags (Telegram, Facebook, WhatsApp) -->
  <meta property="og:title" content="Watch this video from {{ shop.name }}" />
  <meta property="og:type" content="video.other" />
  <meta property="og:url" content="{{ full_page_url }}" />
  <meta property="og:description" content="Check out this video shared from {{ shop.name }}!" />

  {% if thumbnail_url != blank %}
    <meta property="og:image" content="{{ thumbnail_url }}" />
    <meta property="og:image:secure_url" content="{{ thumbnail_url }}" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
  {% else %}
    <meta property="og:image" content="{{ 'default-thumbnail.jpg' | asset_url | prepend: 'https:' }}" />
    <meta property="og:image:secure_url" content="{{ 'default-thumbnail.jpg' | asset_url | prepend: 'https:' }}" />
  {% endif %}

  {% if video_url != blank %}
    <meta property="og:video" content="{{ video_url }}" />
    <meta property="og:video:type" content="video/mp4" />
    <meta property="og:video:width" content="1280" />
    <meta property="og:video:height" content="720" />
  {% endif %}

  <!-- ✅ Twitter Cards -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="Watch this video from {{ shop.name }}" />
  <meta name="twitter:description" content="Check out this video shared from {{ shop.name }}!" />
  {% if thumbnail_url != blank %}
    <meta name="twitter:image" content="{{ thumbnail_url }}" />
  {% else %}
    <meta name="twitter:image" content="{{ 'default-thumbnail.jpg' | asset_url | prepend: 'https:' }}" />
  {% endif %}

  <style>
    body {
      font-family: sans-serif;
      background: #fafafa;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      margin: 0;
      padding: 40px 20px;
    }

    .video-container {
      position: relative;
      width: 100%;
      max-width: 800px;
      aspect-ratio: 16/9;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 4px 30px rgba(0,0,0,0.2);
      cursor: pointer;
      background-color: #000;
    }

    .thumbnail {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .thumbnail:hover {
      transform: scale(1.02);
    }

    .play-button {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.6);
      color: white;
      font-size: 50px;
      padding: 20px 28px;
      border-radius: 50%;
      border: 3px solid white;
      transition: background 0.3s ease;
    }

    .play-button:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    video {
      width: 100%;
      height: 100%;
      display: none;
      border-radius: 16px;
    }
  </style>
</head>

<body>
  <div class="video-container" id="video-container">
    <img id="thumbnail" class="thumbnail" src="{{ 'default-thumbnail.jpg' | asset_url }}" alt="Video thumbnail" />
    <div class="play-button">▶</div>
    <video id="video" controls playsinline>
      <source id="video-source" src="" type="video/mp4">
      Your browser does not support the video tag.
    </video>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const params = new URLSearchParams(window.location.search);
      const videoUrl = params.get("url");
      const thumbUrl = params.get("thumb");
      const video = document.getElementById("video");
      const source = document.getElementById("video-source");
      const container = document.getElementById("video-container");
      const thumbnail = document.getElementById("thumbnail");
      const playButton = document.querySelector(".play-button");

      // ✅ Dynamically inject Open Graph meta tags
      if (thumbUrl) {
        const metaTags = [
          { property: "og:image", content: decodeURIComponent(thumbUrl) },
          { property: "og:image:secure_url", content: decodeURIComponent(thumbUrl) },
          { name: "twitter:image", content: decodeURIComponent(thumbUrl) }
        ];

        metaTags.forEach(tag => {
          const meta = document.createElement("meta");
          if (tag.property) meta.setAttribute("property", tag.property);
          if (tag.name) meta.setAttribute("name", tag.name);
          meta.setAttribute("content", tag.content);
          document.head.appendChild(meta);
        });

        console.log("✅ Injected OG image:", decodeURIComponent(thumbUrl));
        thumbnail.src = decodeURIComponent(thumbUrl);
      } else {
        console.warn("⚠️ No thumbnail provided in URL.");
      }

      // ✅ Assign video URL
      if (videoUrl) {
        source.src = decodeURIComponent(videoUrl);
        video.load();
      }

      // 🎬 On click: hide thumbnail, show video
      container.addEventListener("click", function() {
        thumbnail.style.display = "none";
        playButton.style.display = "none";
        video.style.display = "block";
        video.play();
      });
    });
  </script>
</body>
</html> {% endcomment %}
